# Каждая функция решает соответствующую задачу.
import math


def Triangle_type(a, b, c):
    """По длинам сторон определяет вид треугольника"""
    if not(a + b > c and a + c > b and b + c > a):  # Проверка на существование треугольника
        print("Треугольник не существует")
    elif a == b and b == c:  # Проверка на равенство всех сторон
        print("Треугольник равносторонний")
    elif a == b or a == c or b == c:  # Проверка на равнобедренность
        print("Треугольник равнобедренный")
    else:
        print("Треугольник общего вида")


def Quadratic_equation(a, b, c):
    """По заданным коэффициентам квадратного уравнения
    находит его вещественные корни и их количество"""

    print("Уравнение")
    print('(%.5f)*X^2+(%.5f)*X+(%.5f)=0' % (a, b, c))  # Выводит уравнение в нужном по условию виде
    d = b**2 - 4*a*c  # Находит дискриминант
    if d < 0:  # В Зависимости от значения дискриминанта определяется кол-во корней
        print("Количество корней: 0")
    elif d == 0:
        print("Количество корней: 1")
        print("%.5f" % ((-b - math.sqrt(d)) / (2 * a)))  # По формуле корней квадратного уравнения находится оба
        print("%.5f" % ((-b + math.sqrt(d)) / (2 * a)))  # корня. В случае, если корень один, значения совпадают
    else:
        print("Количество корней: 2")
        print("%.5f" % ((-b - math.sqrt(d)) / (2 * a)))
        print("%.5f" % ((-b + math.sqrt(d)) / (2 * a)))


def Arrival_time(hotp, motp, hp, mp):
    """Находит время прибытия поезда на конечную станцию в виде «HH час : MM мин».
    Также находит количество полных суток в пути до конечной станции."""
    hpr = str((hotp + hp + (motp + mp) // 60) % 24)  # Находится час прибытия. Сначала находится общее кол-во часов,
    # после чего находится остаток от деления на 24, с целью вычета ненужных часов.
    mpr = str((motp + mp) % 60)  # Находятся минуты прибытия.
    if len(hpr) == 1:  # В случае, если число не двузначное, то добавляется незначащий ноль спереди.
        hpr = '0' + hpr
    if len(mpr) == 1:
        mpr = '0' + mpr
    print("%s hours : %s minutes" % (hpr, mpr))  # Вывод времени прибытия в нужном формате
    print("%s days" % (hp // 24))  # Вывод кол-ва полных суток в пути


def Ruble_protect(k):
    """Переводит копейки в рубли, остаток в копейках. Слова рубль, копейка пишутся
    в правильной форме"""
    r = k // 100  # Определяется кол-во рублей и копеек
    k = k % 100
    if r // 10 == 1:  # В зависимости от кол-ва определяется форма слова.
        print("%s РУБЛЕЙ" % r)  # От 10-19 - рублей
    elif r % 10 == 1:
        print("%s РУБЛЬ" % r)  # Оканчивается на 1 - рубль. (искл. 11)
    elif 5 > r % 10 > 1:
        print("%s РУБЛЯ" % r)  # Оканчивается на 2-4 - рубля. (искл. 12-14)
    elif r % 10 > 4 or (r % 10 == 0 and r // 10 != 0):
        print("%s РУБЛЕЙ" % r)  # Оканчивается на 5-9 - рублей. Либо если оканчивается на ноль, но сам ноль не считается
    if k // 10 == 1:  # С копейками аналогично, отличаются только формы.
        print("%s КОПЕЕК" % k)
    elif k % 10 == 1:
        print("%s КОПЕЙКА" % k)
    elif 5 > k % 10 > 1:
        print("%s КОПЕЙКИ" % k)
    elif k % 10 > 4 or (k % 10 == 0 and k // 10 != 0):
        print("%s КОПЕЕК" % k)


Triangle_type(-1, 2, 4)
Triangle_type(0, 0, 0)
Triangle_type(2, 1, 1)
Triangle_type(1, 1, 1)
Triangle_type(2, 2, 1)
Triangle_type(3, 4, 5)
Triangle_type(6, 7, 8)

Quadratic_equation(1, -7, 12)
Quadratic_equation(1, 4, 4)
Quadratic_equation(4, 0, -16)
Quadratic_equation(1, 4, 5)

Arrival_time(12, 20, 20, 40)
Arrival_time(1, 15, 36, 37)
Arrival_time(0, 48, 48, 15)

Ruble_protect(101)
Ruble_protect(13)
Ruble_protect(99999)
Ruble_protect(100000)





